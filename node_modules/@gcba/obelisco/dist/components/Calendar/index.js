"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalendarMonth = void 0;
var react_1 = __importDefault(require("react"));
exports.CalendarMonth = function (_a) {
    var _b = _a.start, start = _b === void 0 ? 0 : _b, numberOfDays = _a.numberOfDays, month = _a.month, _c = _a.year, year = _c === void 0 ? 2024 : _c, activeDays = _a.activeDays, monthNumber = _a.monthNumber, _d = _a.isLinked, isLinked = _d === void 0 ? false : _d, isCollapsed = _a.isCollapsed;
    var monthAmountOfDays = function (monthNumber, year) {
        if (typeof monthNumber !== 'number' || monthNumber < 1 || monthNumber > 12) {
            return 0;
        }
        if (monthNumber === 4 || monthNumber === 6 || monthNumber === 9 || monthNumber === 11) {
            return 30;
        }
        else if (monthNumber === 2) {
            return (year ? year : 2024) % 4 === 0 ? 29 : 28;
        }
        else {
            return 31;
        }
    };
    var daysArray = Array.from({ length: numberOfDays ? numberOfDays : monthAmountOfDays(monthNumber, year) }, function (_, index) { return index + 1; });
    var emptyDaysArray = start < 7 && Array.from({ length: start }, function (_, index) { return react_1.default.createElement("td", { key: index }); });
    var daysInAWeek = 7;
    var totalDays = start + daysArray.length;
    var numberWeeks = Math.ceil(totalDays / 7);
    var totalDaysCalentar = daysArray.length + start;
    var totalWeeksCalendar = Math.ceil(totalDaysCalentar / 7);
    var MONTH_TITLE = [
        'Enero',
        'Febrero',
        'Marzo',
        'Abril',
        'Mayo',
        'Junio',
        'Julio',
        'Agosto',
        'Septiembre',
        'Octubre',
        'Noviembre',
        'Diciembre'
    ];
    var DAYS_HEADER_TABLE = ['D', 'L', 'M', 'M', 'J', 'V', 'S'];
    var activeDaysNotDisabled = activeDays === null || activeDays === void 0 ? void 0 : activeDays.filter(function (activeDay) { return !activeDay.isDisabled; }).length;
    var colorActive = function (text) {
        var mapTexts = {
            sky: 'bg-sky',
            lavender: 'bg-lavender',
            coral: 'bg-coral',
            avocado: 'bg-avocado',
            citrus: 'bg-citrus',
            lime: 'bg-lime',
            pistachio: 'bg-pistachio',
            berries: 'bg-berries',
            musket: 'bg-musket',
            blackberry: 'bg-blackberry',
            aqua: 'bg-aqua',
            strawberry: 'bg-strawberry',
            gray: 'bg-gray'
        };
        var result = mapTexts[text.toLowerCase()] || '';
        return result;
    };
    var renderActiveDay = function (day, activeItem) { return (react_1.default.createElement("span", { className: activeItem.type
            ? activeItem.type === 'secondary'
                ? 'active-secondary'
                : "active " + colorActive(activeItem.type)
            : 'active' }, day)); };
    var renderDayTd = function (day, activeItem, isLinked) {
        if (activeItem) {
            return (react_1.default.createElement("td", { key: day }, activeItem.isDisabled ? (react_1.default.createElement("span", { className: "disabled" }, day)) : isLinked ? (react_1.default.createElement("a", { href: activeItem.url ? activeItem.url : '#', className: "calendar-link", title: activeItem.title && activeItem.title }, renderActiveDay(day, activeItem))) : (react_1.default.createElement("span", { title: activeItem.title && activeItem.title }, renderActiveDay(day, activeItem)))));
        }
        else {
            return (react_1.default.createElement("td", { key: day },
                react_1.default.createElement("span", null, day)));
        }
    };
    var renderDays = function (startIdx, endIdx, activeItems) {
        return daysArray.slice(startIdx, endIdx).map(function (day) {
            var activeItem = activeItems === null || activeItems === void 0 ? void 0 : activeItems.find(function (obj) {
                if (Array.isArray(obj.day)) {
                    return obj.day.includes(day);
                }
                return obj.day === day;
            });
            return renderDayTd(day, activeItem, isLinked);
        });
    };
    var renderDaysForRow = function (startIdx, endIdx, activeItems) {
        var daysForRow = daysArray.slice(startIdx, endIdx);
        while (daysForRow.length < 7) {
            daysForRow.push(null);
        }
        return daysForRow.map(function (day, index) {
            if (day !== null) {
                var activeItem = activeItems === null || activeItems === void 0 ? void 0 : activeItems.find(function (obj) {
                    if (Array.isArray(obj.day)) {
                        return obj.day.includes(day);
                    }
                    return obj.day === day;
                });
                return renderDayTd(day, activeItem, isLinked);
            }
            else {
                return (react_1.default.createElement("td", { key: index },
                    react_1.default.createElement("span", null)));
            }
        });
    };
    var renderEmptyCells = function () {
        var emptyCells = [];
        var i = 0;
        while (i < 7) {
            emptyCells.push(react_1.default.createElement("td", { key: i },
                react_1.default.createElement("span", null)));
            i++;
        }
        return emptyCells;
    };
    var renderFooter = function () {
        if (activeDays && (activeDaysNotDisabled || 0 > 0)) {
            return (react_1.default.createElement("div", { className: "calendar-footer" }, isCollapsed ? (react_1.default.createElement("div", { className: "accordion" },
                react_1.default.createElement("div", { className: "card" },
                    react_1.default.createElement("button", { className: "card-header collapsed", "data-toggle": "collapse", "data-target": "#collapse" + monthsTitles(monthNumber) },
                        react_1.default.createElement("i", { className: "bx bx-calendar" }),
                        react_1.default.createElement("span", { className: "collapse-title" }, "Referencias")),
                    react_1.default.createElement("div", { id: "collapse" + monthsTitles(monthNumber), className: "collapse" },
                        react_1.default.createElement("div", { className: "card-body" },
                            react_1.default.createElement("ul", { className: "calendar-footer-list" }, activeDays === null || activeDays === void 0 ? void 0 : activeDays.map(function (activeDay, index) {
                                return !activeDay.isDisabled && (react_1.default.createElement("li", { key: index },
                                    react_1.default.createElement("strong", null, Array.isArray(activeDay.day) && activeDay.day.length === 2
                                        ? activeDay.day[0] + ", " + activeDay.day[1] + "."
                                        : Array.isArray(activeDay.day) && activeDay.day.length > 2
                                            ? activeDay.day[0] + " al " + activeDay.day[activeDay.day.length - 1] + "."
                                            : activeDay.day + "."),
                                    ' ',
                                    activeDay.title));
                            }))))))) : (react_1.default.createElement("ul", { className: "calendar-footer-list" }, activeDays === null || activeDays === void 0 ? void 0 : activeDays.map(function (activeDay, index) {
                return !activeDay.isDisabled && (react_1.default.createElement("li", { key: index },
                    react_1.default.createElement("strong", null, Array.isArray(activeDay.day) && activeDay.day.length === 2
                        ? activeDay.day[0] + ", " + activeDay.day[1] + "."
                        : Array.isArray(activeDay.day) && activeDay.day.length > 2
                            ? activeDay.day[0] + " al " + activeDay.day[activeDay.day.length - 1] + "."
                            : activeDay.day + "."),
                    ' ',
                    activeDay.title));
            })))));
        }
        else {
            return null;
        }
    };
    var monthsTitles = function (monthNumber) {
        if (monthNumber && monthNumber >= 1 && monthNumber <= 12) {
            return MONTH_TITLE[monthNumber - 1];
        }
        else {
            return 'Mes invÃ¡lido';
        }
    };
    return (react_1.default.createElement("div", { className: "calendar" },
        react_1.default.createElement("div", { className: "calendar-header" },
            react_1.default.createElement("h2", { className: "calendar-title" }, month ? month : monthsTitles(monthNumber)),
            react_1.default.createElement("span", { className: "calendar-year" }, year)),
        react_1.default.createElement("div", { className: "calendar-body" },
            react_1.default.createElement("table", null,
                react_1.default.createElement("thead", null,
                    react_1.default.createElement("tr", { className: "calendar-week-header" }, DAYS_HEADER_TABLE.map(function (dayHeader, index) { return (react_1.default.createElement("th", { key: index },
                        react_1.default.createElement("span", null, dayHeader))); }))),
                react_1.default.createElement("tbody", null,
                    Array.from({ length: numberWeeks }, function (_, i) { return (react_1.default.createElement("tr", { key: i, className: "calendar-week" }, i === 0 ? (react_1.default.createElement(react_1.default.Fragment, null,
                        emptyDaysArray,
                        renderDays(i, daysInAWeek - start, activeDays))) : (react_1.default.createElement(react_1.default.Fragment, null, renderDaysForRow(daysInAWeek * i - start, daysInAWeek - start + daysInAWeek * i, activeDays))))); }),
                    totalWeeksCalendar !== 6 && react_1.default.createElement("tr", { className: "calendar-week" }, renderEmptyCells())))),
        renderFooter()));
};
//# sourceMappingURL=index.js.map