"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CardComponent = exports.Card = exports.SimpleCard = void 0;
var React = __importStar(require("react"));
exports.SimpleCard = function (props) {
    var _a;
    var title = props.title, description = props.description, href = props.href, picture = props.picture, tags = props.tags;
    var hasPicture = ((_a = picture) === null || _a === void 0 ? void 0 : _a.src) != undefined;
    var className = "card card-simple";
    if (hasPicture)
        className += " card-horizontal";
    if (props.className)
        className += " " + props.className;
    return (React.createElement("div", { className: className },
        getImage(picture, true),
        React.createElement("div", { className: "card-body" },
            getIcon(picture), tags === null || tags === void 0 ? void 0 :
            tags.map(function (text) { return (React.createElement("span", { key: text, className: "badge badge-info" }, text)); }),
            React.createElement("h4", { className: "card-title" }, href ? React.createElement("a", { href: href }, title) : title),
            description && React.createElement("p", { className: "card-text" }, description))));
};
exports.Card = function (props) {
    var title = props.title, description = props.description, href = props.href, picture = props.picture, footer = props.footer, orientation = props.orientation, tags = props.tags, onClick = props.onClick;
    var isHorizontal = orientation === 'horizontal';
    var className = "card";
    if (isHorizontal)
        className += " card-horizontal";
    if (props.className)
        className += " " + props.className;
    var containerProps = { className: className };
    if (href)
        containerProps.href = href;
    if (onClick)
        containerProps.onClick = onClick;
    containerProps.children = (React.createElement(React.Fragment, null,
        getImage(picture, isHorizontal),
        React.createElement("div", { className: "card-body" },
            getIcon(picture),
            React.createElement(Tags, { tags: tags }),
            React.createElement("h4", { className: "card-title" }, title),
            description && React.createElement("p", { className: "card-text" }, description)),
        footer && (React.createElement("div", { className: "card-footer" },
            React.createElement("small", null, footer)))));
    return React.createElement(href ? 'a' : onClick ? 'button' : 'div', containerProps);
};
var getImage = function (picture, isHorizontal) {
    if (picture && picture.src !== undefined) {
        return React.createElement("img", { src: picture.src, className: "card-img-" + (isHorizontal ? 'left' : 'top'), alt: picture.alt || '' });
    }
    return null;
};
var getIcon = function (picture) {
    if (picture && picture.icon !== undefined) {
        return React.createElement("i", { className: "bx " + picture.icon + " card-icon", style: { color: picture.color } });
    }
    return null;
};
var Tags = function (_a) {
    var tags = _a.tags;
    if (tags) {
        return (React.createElement("div", { className: "mb-2" }, tags === null || tags === void 0 ? void 0 : tags.map(function (text) { return (React.createElement("span", { key: text, className: "badge badge-info" }, text)); })));
    }
    else {
        return null;
    }
};
var getIconCard = function (icon, isHorizontal) {
    if (icon && !(icon === null || icon === void 0 ? void 0 : icon.includes('bx'))) {
        return React.createElement("span", { className: "material-icons-round " + (isHorizontal ? 'card-icon-left' : 'card-icon') }, icon);
    }
    else {
        return React.createElement("i", { className: icon + " " + (isHorizontal ? 'card-icon-left' : 'card-icon') });
    }
};
exports.CardComponent = function (props) {
    var title = props.title, description = props.description, headline = props.headline, href = props.href, _a = props.isHorizontal, isHorizontal = _a === void 0 ? false : _a, isThemeCard = props.isThemeCard, hasNoBorder = props.hasNoBorder, icon = props.icon, image = props.image, tags = props.tags, isTitleTruncate = props.isTitleTruncate, children = props.children;
    var cardClassName = "card";
    if (isHorizontal)
        cardClassName += " card-horizontal";
    if (hasNoBorder && !isHorizontal && !isThemeCard)
        cardClassName += " card-simple";
    if (hasNoBorder && isHorizontal)
        cardClassName += " unbordered";
    if (isThemeCard)
        cardClassName += " card-horizontal card-simple card-lg";
    return (React.createElement("div", { className: cardClassName },
        icon && isHorizontal && getIconCard(icon, isHorizontal),
        image && (React.createElement("img", { src: image.src, className: "card-img-" + (isHorizontal || isThemeCard ? 'left' : 'top'), alt: image.alt })),
        React.createElement("div", { className: "card-body" },
            tags && (React.createElement("div", { className: "card-badges" }, tags.map(function (tag, index) { return (React.createElement("span", { key: index, className: "badge badge-" + (tag.type ? tag.type : 'secondary') }, tag.text)); }))),
            icon && !isHorizontal && getIconCard(icon, isHorizontal),
            headline && React.createElement("p", { className: "card-headline" }, headline),
            React.createElement("h3", { className: "card-title" },
                React.createElement("a", { href: href, className: !hasNoBorder || isTitleTruncate
                        ? ((hasNoBorder ? '' : 'card-title-link') + " " + (isTitleTruncate ? 'ellipsis-3' : '')).trim()
                        : undefined }, title)),
            description && React.createElement("p", { className: "card-text" }, description),
            children && React.createElement("div", { className: "card-info" }, children))));
};
//# sourceMappingURL=index.js.map