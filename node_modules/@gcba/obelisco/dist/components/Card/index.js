"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Card = exports.SimpleCard = void 0;
var React = require("react");
exports.SimpleCard = function (props) {
    var title = props.title, subTitle = props.subTitle, description = props.description, href = props.href, picture = props.picture, tags = props.tags;
    var className = "card card-simple";
    if (props.className)
        className += " " + props.className;
    return (React.createElement("div", { className: className },
        React.createElement("div", { className: "card-body" },
            getIcon(picture), tags === null || tags === void 0 ? void 0 :
            tags.map(function (text) { return (React.createElement("span", { key: text, className: "badge badge-info" }, text)); }),
            React.createElement("h3", { className: "card-title" }, href ? React.createElement("a", { href: href }, title) : title),
            subTitle && React.createElement("div", { className: "card-subtitle" }, subTitle),
            React.createElement("p", { className: "card-text" }, description))));
};
exports.Card = function (props) {
    var title = props.title, subTitle = props.subTitle, description = props.description, href = props.href, picture = props.picture, footer = props.footer, orientation = props.orientation, tags = props.tags, onClick = props.onClick;
    var isHorizontal = orientation === 'horizontal';
    var className = "card";
    if (isHorizontal)
        className += " card-horizontal";
    if (props.className)
        className += " " + props.className;
    var containerProps = { className: className };
    if (href)
        containerProps.href = href;
    if (onClick)
        containerProps.onClick = onClick;
    containerProps.children = (React.createElement(React.Fragment, null,
        getImage(picture, isHorizontal),
        React.createElement("div", { className: "card-body" },
            getIcon(picture),
            React.createElement(Tags, { tags: tags }),
            React.createElement("h3", { className: "card-title" }, title),
            subTitle && React.createElement("div", { className: "card-subtitle" }, subTitle),
            React.createElement("p", { className: "card-text" }, description)),
        footer && (React.createElement("div", { className: "card-footer" },
            React.createElement("small", null, footer)))));
    return React.createElement(href ? 'a' : onClick ? 'button' : 'div', containerProps);
};
var getImage = function (picture, isHorizontal) {
    if (picture && picture.src !== undefined) {
        return (React.createElement("img", { src: picture.src, className: "card-img-" + (isHorizontal ? 'left' : 'top'), alt: picture.alt || '', width: picture.width }));
    }
    return null;
};
var getIcon = function (picture) {
    if (picture && picture.icon !== undefined) {
        return React.createElement("i", { className: "bx " + picture.icon + " card-icon", style: { color: picture.color } });
    }
    return null;
};
var Tags = function (_a) {
    var tags = _a.tags;
    if (tags) {
        return (React.createElement("div", { className: "mb-2" }, tags === null || tags === void 0 ? void 0 : tags.map(function (text) { return (React.createElement("span", { key: text, className: "badge badge-info" }, text)); })));
    }
    else {
        return null;
    }
};
//# sourceMappingURL=index.js.map