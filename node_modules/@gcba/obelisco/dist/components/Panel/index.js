"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmallPanel = exports.LargePanel = void 0;
var react_1 = __importDefault(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var getImage = function (picture) {
    if (picture && picture.src !== undefined) {
        return (react_1.default.createElement("img", __assign({ src: picture.src, alt: picture.alt || '', className: picture.className || 'card-img' }, (picture.size && { width: picture.size, height: picture.size }))));
    }
    return null;
};
var getVideo = function (video) {
    if (video && video.src !== undefined) {
        return (react_1.default.createElement("video", { className: "card-img", controls: true },
            react_1.default.createElement("source", { src: video.src, type: "video/mp4" }),
            react_1.default.createElement("p", null, "Su navegador no soporta v\u00EDdeos HTML5.")));
    }
    return null;
};
var ButtonIcon = function (_a) {
    var icon = _a.icon;
    return (react_1.default.createElement(react_1.default.Fragment, null,
        !icon.includes('bx') && react_1.default.createElement("span", { className: "material-icons-round" }, icon),
        icon.includes('bx') && react_1.default.createElement("i", { className: icon })));
};
var ButtonGroup = function (_a) {
    var buttons = _a.buttons;
    return (react_1.default.createElement("div", { className: "panel-footer" }, buttons.map(function (_a, index) {
        var className = _a.className, name = _a.name, icon = _a.icon;
        return (react_1.default.createElement("button", { type: "button", className: className, key: index },
            icon && react_1.default.createElement(ButtonIcon, { icon: icon }),
            name));
    })));
};
var LinkGroup = function (_a) {
    var link = _a.link, picture = _a.picture, video = _a.video;
    return (react_1.default.createElement("div", { className: "panel-footer" },
        react_1.default.createElement("a", __assign({}, (link.className && { className: link.className }), { href: !link.url ? (picture ? picture === null || picture === void 0 ? void 0 : picture.src : video === null || video === void 0 ? void 0 : video.src) : link.url }, (link.isDownload && { download: true }), (!link.isDownload && { target: '_blank', rel: 'noreferrer' })),
            link.icon && react_1.default.createElement(ButtonIcon, { icon: link.icon }),
            link.name)));
};
var LinkList = function (_a) {
    var _b;
    var listLinkPanel = _a.listLinkPanel;
    return (react_1.default.createElement("div", { className: "list-link" },
        react_1.default.createElement("h4", { className: "list-link-item-title" }, listLinkPanel.listTitle), (_b = listLinkPanel.links) === null || _b === void 0 ? void 0 :
        _b.map(function (_a, index) {
            var name = _a.name, className = _a.className, url = _a.url, icon = _a.icon, isDownload = _a.isDownload;
            return (react_1.default.createElement("a", __assign({ key: index }, (className && { className: className }), { href: url }, (isDownload && { download: true }), (!isDownload && { target: '_blank', rel: 'noreferrer' })),
                icon && react_1.default.createElement(ButtonIcon, { icon: icon }),
                name));
        })));
};
var LinkButtonList = function (_a) {
    var listLinkButtonPanel = _a.listLinkButtonPanel;
    return (react_1.default.createElement("div", { className: "list-link" }, listLinkButtonPanel.map(function (_a, index) {
        var listTitle = _a.listTitle, name = _a.name, className = _a.className, url = _a.url, icon = _a.icon, isDownload = _a.isDownload;
        return (react_1.default.createElement(react_1.default.Fragment, { key: index },
            react_1.default.createElement("h4", { className: "list-link-item-title" }, listTitle),
            react_1.default.createElement("a", __assign({}, (className && { className: className }), { href: url }, (isDownload && { download: true }), (!isDownload && { target: '_blank', rel: 'noreferrer' })),
                icon && react_1.default.createElement(ButtonIcon, { icon: icon }),
                name)));
    })));
};
var PanelFooter = function (_a) {
    var buttons = _a.buttons, link = _a.link, listLinkPanel = _a.listLinkPanel, listLinkButtonPanel = _a.listLinkButtonPanel, picture = _a.picture, video = _a.video;
    return (react_1.default.createElement(react_1.default.Fragment, null,
        buttons && react_1.default.createElement(ButtonGroup, { buttons: buttons }),
        link && react_1.default.createElement(LinkGroup, { link: link, picture: picture, video: video }),
        listLinkPanel && react_1.default.createElement(LinkList, { listLinkPanel: listLinkPanel }),
        listLinkButtonPanel && react_1.default.createElement(LinkButtonList, { listLinkButtonPanel: listLinkButtonPanel })));
};
exports.LargePanel = function (props) {
    var _a;
    var title = props.title, description = props.description, picture = props.picture, video = props.video, buttons = props.buttons, link = props.link, bgColor = props.bgColor, direction = props.direction;
    var panelClasses = classnames_1.default('card', 'card-simple', "panel-" + (direction ? direction : 'horizontal'), (_a = {},
        _a["bg-" + bgColor] = bgColor !== undefined,
        _a));
    return (react_1.default.createElement("div", { className: panelClasses.trim() },
        picture && getImage(picture),
        video && getVideo(video),
        react_1.default.createElement("div", { className: "card-body" },
            react_1.default.createElement("h2", { className: "card-title" }, title),
            description && react_1.default.createElement("p", { className: "card-text" }, description),
            react_1.default.createElement(PanelFooter, { buttons: buttons, link: link, picture: picture, video: video }))));
};
exports.SmallPanel = function (props) {
    var _a, _b, _c;
    var title = props.title, description = props.description, picture = props.picture, buttons = props.buttons, link = props.link, bgColor = props.bgColor, direction = props.direction, listLinkPanel = props.listLinkPanel, listLinkButtonPanel = props.listLinkButtonPanel;
    var smallPanelClasses = classnames_1.default('card', 'card-simple', (_a = {},
        _a["panel-list-link" + (direction === 'horizontal' ? " panel-sm-horizontal" : ''.trim())] = listLinkPanel || listLinkPanel !== undefined || listLinkButtonPanel || listLinkButtonPanel !== undefined,
        _a), (_b = {},
        _b["panel-sm" + (direction ? "-" + direction : '')] = (!listLinkPanel && !listLinkButtonPanel && direction !== 'horizontal') ||
            (listLinkPanel == undefined && listLinkButtonPanel == undefined),
        _b), (_c = {}, _c["bg-" + bgColor] = bgColor !== undefined, _c));
    if (direction === 'horizontal') {
        return (react_1.default.createElement("div", { className: smallPanelClasses.trim() },
            picture && getImage(picture),
            react_1.default.createElement("div", { className: "card-body" },
                react_1.default.createElement("h3", { className: "card-title" }, title),
                description && react_1.default.createElement("p", { className: "card-text" }, description),
                react_1.default.createElement(PanelFooter, { buttons: buttons, link: link, listLinkPanel: listLinkPanel, listLinkButtonPanel: listLinkButtonPanel }))));
    }
    else {
        return (react_1.default.createElement("div", { className: smallPanelClasses.trim() },
            picture && getImage(picture),
            react_1.default.createElement("div", { className: "card-body" },
                react_1.default.createElement("h3", { className: "card-title" }, title),
                description && react_1.default.createElement("p", { className: "card-text" }, description)),
            react_1.default.createElement(PanelFooter, { buttons: buttons, link: link, listLinkPanel: listLinkPanel, listLinkButtonPanel: listLinkButtonPanel })));
    }
};
//# sourceMappingURL=index.js.map