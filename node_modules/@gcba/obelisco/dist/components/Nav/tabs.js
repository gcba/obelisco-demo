"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NavTabsSlider = void 0;
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var _1 = require(".");
var NavItemComponentSlider = function (props) {
    var name = props.name, id = props.id, href = props.href, children = props.children, level = props.level, disabled = props.disabled, selected = props.selected, hasBordered = props.hasBordered, type = props.type, hasIcon = props.hasIcon, onSelect = props.onSelect, iconTabs = props.iconTabs;
    var isActive = selected && id === selected;
    var hasActiveChild = _1.checkActiveChild(children, selected);
    var linkClassName = classnames_1.default('nav-link', {
        'nav-link-sm': type === 'small',
        'nav-link-lg': type === 'large',
        'border-link': hasBordered,
        'active-child': !disabled && hasActiveChild,
        active: !disabled && isActive,
        disabled: disabled
    });
    return (react_1.default.createElement("li", { className: "nav-item" },
        react_1.default.createElement("a", { className: linkClassName, href: href || '#', onClick: onSelect, "aria-disabled": disabled, tabIndex: disabled ? -1 : undefined }, hasIcon && iconTabs ? (react_1.default.createElement("div", { className: "nav-icon", dangerouslySetInnerHTML: { __html: name + " " + iconTabs } })) : (react_1.default.createElement(react_1.default.Fragment, null, name))),
        !disabled && (isActive || hasActiveChild) && children && (react_1.default.createElement("ul", { className: listClasses }, children.map(function (item) { return (react_1.default.createElement(_1.NavItemComponent, __assign({}, item, { key: item.id, level: level + 1, onClick: props.onClick, selected: selected, hasIcon: hasIcon }))); })))));
};
var listClasses = 'nav nav-pills tabs';
exports.NavTabsSlider = function (props) {
    var items = props.items, selected = props.selected, navSize = props.navSize, hasIcon = props.hasIcon, classUl = props.classUl, _a = props.isWithButton, isWithButton = _a === void 0 ? true : _a;
    var _b = react_1.useState(false), isDragging = _b[0], setIsDragging = _b[1];
    var _c = react_1.useState(0), startX = _c[0], setStartX = _c[1];
    var _d = react_1.useState(0), scrollLeft = _d[0], setScrollLeft = _d[1];
    var mainListClasses = classnames_1.default(classUl, {
        'nav-lg': navSize === 'large'
    });
    var tabsBoxRef = react_1.useRef(null);
    var handleIcons = function (scrollVal) {
        var _a, _b, _c;
        var tabsBox = tabsBoxRef.current;
        if (!tabsBox)
            return;
        var maxScrollableWidth = tabsBox.scrollWidth - tabsBox.clientWidth;
        var arrowIcons = (_a = tabsBox.parentElement) === null || _a === void 0 ? void 0 : _a.querySelectorAll('.icon');
        (_b = arrowIcons === null || arrowIcons === void 0 ? void 0 : arrowIcons[0]) === null || _b === void 0 ? void 0 : _b.style.setProperty('display', scrollVal <= 0 || tabsBox.scrollLeft === 1 ? 'none' : 'flex');
        (_c = arrowIcons === null || arrowIcons === void 0 ? void 0 : arrowIcons[1]) === null || _c === void 0 ? void 0 : _c.style.setProperty('display', maxScrollableWidth - scrollVal <= 1 || tabsBox.scrollLeft === maxScrollableWidth ? 'none' : 'flex');
    };
    var handleIconClick = function (event) {
        var iconId = event.currentTarget.id;
        var tabsBox = tabsBoxRef.current;
        if (!tabsBox)
            return;
        var currentPosition = tabsBox.scrollLeft;
        var tabs = tabsBox.querySelectorAll('.nav-item');
        var tabWidth = tabs.length > 0 ? tabs[0].getBoundingClientRect().width + 5 : 0;
        var scrollDistance = iconId === 'left' ? -tabWidth - 30 : tabWidth - 30;
        var targetPosition = currentPosition + scrollDistance;
        var options = {
            left: targetPosition,
            behavior: 'smooth'
        };
        tabsBox.scrollTo(options);
        handleIcons(targetPosition);
    };
    var handleTabClick = function (event) {
        var _a;
        var tab = event.currentTarget;
        var tabsBox = tabsBoxRef.current;
        event.preventDefault();
        if (!tabsBox)
            return;
        if (scrollLeft == ((_a = tabsBoxRef === null || tabsBoxRef === void 0 ? void 0 : tabsBoxRef.current) === null || _a === void 0 ? void 0 : _a.scrollLeft)) {
            var activeTab_1 = tabsBox.querySelector('.active');
            if (activeTab_1) {
                var duration = 1;
                setTimeout(function () {
                    activeTab_1.classList.remove('active');
                    tab.classList.add('active');
                }, duration);
            }
            else {
                tab.classList.add('active');
            }
        }
    };
    var handleMouseDown = function (event) {
        setIsDragging(true);
        event.preventDefault();
        var tabsBox = tabsBoxRef.current;
        if (!tabsBox)
            return;
        setStartX(event.pageX - tabsBox.offsetLeft);
        setScrollLeft(tabsBox.scrollLeft);
    };
    var handleMouseMove = function (event) {
        if (!isDragging)
            return;
        event.preventDefault();
        var tabsBox = tabsBoxRef.current;
        if (!tabsBox)
            return;
        var x = event.pageX - tabsBox.offsetLeft;
        var walk = (x - startX) * 1.2; // Velocidad de desplazamiento ajustable
        tabsBox.scrollLeft = scrollLeft - walk;
        handleIcons(tabsBox.scrollLeft);
    };
    var handleTouchStart = function (event) {
        setIsDragging(true);
        event.preventDefault();
        var tabsBox = tabsBoxRef.current;
        if (!tabsBox)
            return;
        setStartX(event.touches[0].pageX - tabsBox.offsetLeft);
        setScrollLeft(tabsBox.scrollLeft);
    };
    var handleTouchMove = function (event) {
        if (!isDragging)
            return;
        event.preventDefault();
        var tabsBox = tabsBoxRef.current;
        if (!tabsBox)
            return;
        var x = event.touches[0].pageX - tabsBox.offsetLeft;
        var walk = (x - startX) * 1.2; // Velocidad de desplazamiento ajustable
        tabsBox.scrollLeft = scrollLeft - walk;
        handleIcons(tabsBox.scrollLeft);
    };
    var handleTouchEnd = function () { return setIsDragging(false); };
    var handleMouseLeave = function () { return setIsDragging(false); };
    var handleMouseUp = function () { return setIsDragging(false); };
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement("nav", { className: "tabs-slider " + (!isWithButton ? 'px-0' : '') },
            react_1.default.createElement("ul", { className: mainListClasses, ref: tabsBoxRef, onMouseDown: handleMouseDown, onMouseUp: handleMouseUp, onMouseMove: handleMouseMove, onTouchStart: handleTouchStart, onTouchMove: handleTouchMove, onTouchEnd: handleTouchEnd, onMouseLeave: handleMouseLeave }, items.map(function (item) { return (react_1.default.createElement(NavItemComponentSlider, __assign({}, item, { key: item.id, level: 0, onSelect: handleTabClick, selected: selected, hasIcon: hasIcon, type: item.type }))); })),
            isWithButton && (react_1.default.createElement("div", { className: "icons-container" },
                react_1.default.createElement("div", { className: "right-left icon", onClick: handleIconClick, id: "left" },
                    react_1.default.createElement("span", { className: "material-icons-round" }, "arrow_back_ios")),
                react_1.default.createElement("div", { className: "right-left icon", onClick: handleIconClick, id: "right" },
                    react_1.default.createElement("span", { className: "material-icons-round" }, "arrow_forward_ios")))))));
};
//# sourceMappingURL=tabs.js.map