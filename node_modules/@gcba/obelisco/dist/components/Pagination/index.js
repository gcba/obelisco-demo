"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaginationNumber = exports.PaginationItem = exports.Pagination = void 0;
var React = require("react");
exports.Pagination = function (props) {
    var pages = Array.from(Array(props.pages).keys());
    var _a = React.useState(props.default || 0), current = _a[0], setCurrent = _a[1];
    var prevText = props.prevText, nextText = props.nextText;
    var isPrevDisabled = current === 0;
    var isNextDisabled = current === pages.length - 1;
    var onPageSelected = function (page) {
        setCurrent(page);
        props.onPageSelected && props.onPageSelected(page);
    };
    var onPrev = function () {
        if (current > 0)
            onPageSelected(current - 1);
    };
    var onNext = function () {
        if (current < pages.length - 1)
            onPageSelected(current + 1);
    };
    var pagesToShow = pages;
    var showTopTrimmer = false;
    var showBottomTrimmer = false;
    var lastIndex = pages.length - 1;
    if (pages.length > 9) {
        if (current < 5) {
            pagesToShow = pagesToShow.slice(0, 7);
            showTopTrimmer = true;
        }
        else if (current > lastIndex - 5) {
            pagesToShow = pagesToShow.slice(lastIndex - 5);
            showBottomTrimmer = true;
        }
        else {
            pagesToShow = pagesToShow.slice(current - 2, current + 3);
            showBottomTrimmer = true;
            showTopTrimmer = true;
        }
    }
    return (React.createElement("nav", { "aria-label": props.ariaLabel },
        React.createElement("ul", { className: "pagination" },
            React.createElement(exports.PaginationItem, { disabled: isPrevDisabled, onClick: function () { return onPrev(); } },
                React.createElement("span", { className: "page-previous-icon", "aria-hidden": "true" }),
                React.createElement("span", { className: "page-previous-text" },
                    " ",
                    prevText ? prevText : 'Anterior')),
            showBottomTrimmer && (React.createElement(React.Fragment, null,
                React.createElement(exports.PaginationNumber, { index: 0, current: current, onClick: function () { return onPageSelected(0); } }),
                React.createElement(exports.PaginationItem, { disabled: true }, "..."))),
            pagesToShow.map(function (i) { return (React.createElement(exports.PaginationNumber, { index: i, key: i, current: current, onClick: function () { return onPageSelected(i); } })); }),
            showTopTrimmer && (React.createElement(React.Fragment, null,
                React.createElement(exports.PaginationItem, { disabled: true }, "..."),
                React.createElement(exports.PaginationNumber, { index: lastIndex, current: current, onClick: function () { return onPageSelected(lastIndex); } }))),
            React.createElement(exports.PaginationItem, { disabled: isNextDisabled, onClick: function () { return onNext(); } },
                React.createElement("span", { className: "page-next-text" },
                    nextText ? nextText : 'Siguiente',
                    " "),
                React.createElement("span", { className: "page-next-icon", "aria-hidden": "true" })))));
};
exports.PaginationItem = function (props) {
    var onClick = function (event) {
        event.preventDefault();
        props.onClick && props.onClick();
    };
    if (props.disabled) {
        return (React.createElement("li", { className: "page-item disabled" },
            React.createElement("span", { className: "page-link" }, props.children)));
    }
    return (React.createElement("li", { className: "page-item " + (props.active ? 'active' : '') },
        React.createElement("a", { className: "page-link", href: "#", onClick: onClick }, props.children)));
};
exports.PaginationNumber = function (props) {
    var index = props.index, current = props.current, onClick = props.onClick;
    return (React.createElement(exports.PaginationItem, { active: index === current, onClick: onClick }, index + 1));
};
//# sourceMappingURL=index.js.map