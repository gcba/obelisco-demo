"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
var React = require("react");
exports.Table = function (props) {
    var head = props.head, body = props.body, caption = props.caption, striped = props.striped, bordered = props.bordered, hoverable = props.hoverable, selectable = props.selectable;
    var className = "table";
    if (striped)
        className += " table-striped";
    if (bordered)
        className += " table-bordered";
    if (hoverable)
        className += " table-hover";
    if (selectable)
        className += " table-selectable";
    if (props.className)
        className += " " + props.className;
    return (React.createElement("table", { className: className },
        caption && React.createElement("caption", null, caption),
        React.createElement("thead", null,
            React.createElement("tr", null,
                selectable && React.createElement(TableCellRenderer, { type: "head", cell: React.createElement(Selectable, null) }),
                head.map(function (cell, index) { return (React.createElement(TableCellRenderer, { type: "head", cell: cell, key: index })); }))),
        React.createElement("tbody", null, body.map(function (row, index) { return (React.createElement("tr", { key: index },
            selectable && (React.createElement("td", null,
                React.createElement(Selectable, null))),
            row.map(function (cell, index) { return (React.createElement(TableCellRenderer, { type: "body", cell: cell, key: index })); }))); }))));
};
var TableCellRenderer = function (props) {
    var type = props.type, cell = props.cell;
    var content;
    var childProps = {};
    if (typeof cell === 'object' && !React.isValidElement(cell)) {
        content = cell.content || '-';
        childProps = cell.props || {};
    }
    else {
        content = cell;
    }
    if (type === 'head') {
        return (React.createElement("th", __assign({ scope: "col" }, childProps), content));
    }
    else if (type === 'body') {
        return React.createElement("td", __assign({}, childProps), content);
    }
    return React.createElement(React.Fragment, null);
};
var Selectable = function () { return React.createElement("input", { type: "checkbox", "aria-label": "checkbox" }); };
//# sourceMappingURL=index.js.map